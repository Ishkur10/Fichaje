import React, { useState, useEffect, useRef } from 'react';\nimport { LogIn, LogOut, Save, StopCircle, Timer, Play, Pause, Gift, Award, Calendar, Plus } from 'lucide-react';\nimport useFichaje from '../../hooks/useFichaje';\nimport Button from '../ui/Button';\nimport Input from '../ui/Input';\nimport Alert from '../ui/Alert';\nimport RegistrarDiaEspecialModal from './RegistrarDiaEspecialModal';\n\nconst TemporizadorOptimizado = ({ colorBorde, colorTexto }) => {\n  const { tiempoSesion, sesionActiva, togglePausaSesion } = useFichaje();\n  const timerRef = useRef(null);\n  \n  const formatearTiempo = (segundos) => {\n    const horas = Math.floor(segundos / 3600);\n    const minutos = Math.floor((segundos % 3600) / 60);\n    const segs = Math.floor(segundos % 60);\n    \n    return `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}:${segs.toString().padStart(2, '0')}`;\n  };\n  \n\n  useEffect(() => {\n    if (timerRef.current) {\n      timerRef.current.textContent = formatearTiempo(tiempoSesion);\n    }\n  }, [tiempoSesion]);\n  \n  const horasBase = 8 * 60 * 60; \n  const porcentaje = Math.min(100, (tiempoSesion / horasBase) * 100);\n\n  const handleTogglePausa = () => {\n    if (!sesionActiva) return;\n    togglePausaSesion(!sesionActiva.pausada);\n  };\n  \n  return (\n    <div className=\"flex flex-col items-center\">\n      <div className={`relative flex items-center justify-center w-36 h-36 rounded-full border-4 ${colorBorde}`}>\n        <div \n          className=\"absolute top-0 left-0 w-full h-full rounded-full\"\n          style={{\n            background: `conic-gradient(${colorBorde.replace('border-', 'rgb(var(--color-')}) ${porcentaje}%, transparent ${porcentaje}%)`,\n            opacity: 0.2\n          }}\n        ></div>\n        \n        <div className=\"text-center\">\n          <div className={`text-2xl font-bold ${colorTexto} tiempo-display`} ref={timerRef}>\n            {formatearTiempo(tiempoSesion)}\n          </div>\n          <div className=\"text-xs text-gray-500 mt-1\">\n            Tiempo trabajado\n          </div>\n        </div>\n      </div>\n      \n      {sesionActiva && (\n        <button \n          onClick={handleTogglePausa}\n          className=\"mt-2 flex items-center text-sm text-gray-600 hover:text-gray-800\"\n        >\n          {sesionActiva.pausada ? (\n            <>\n              <Play className=\"h-4 w-4 mr-1\" /> Continuar\n            </>\n          ) : (\n            <>\n              <Pause className=\"h-4 w-4 mr-1\" /> Pausar\n            </>\n          )}\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst ControlFichaje = () => {\n  const { \n    registrarEntrada, \n    registrarSalida, \n    nombreEmpleado, \n    setNombreEmpleado,\n    sesionActiva,\n    cancelarSesionActiva,\n    togglePausaSesion,\n    verificarFestivo,\n    getResumenHorasExtras\n  } = useFichaje();\n  \n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [nombreTemp, setNombreTemp] = useState(nombreEmpleado);\n  const [alerta, setAlerta] = useState(null);\n  const [infoContexto, setInfoContexto] = useState(null);\n  const [modalDiaEspecialAbierto, setModalDiaEspecialAbierto] = useState(false);\n  \n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    \n    return () => clearInterval(interval);\n  }, []);\n  \n  // Efecto para obtener información de contexto del día\n  useEffect(() => {\n    const hoy = new Date();\n    const infoFestivo = verificarFestivo(hoy);\n    \n    // Obtener resumen de horas extras de la semana actual\n    const inicioSemana = new Date(hoy);\n    const dia = inicioSemana.getDay();\n    const diferencia = dia === 0 ? -6 : 1 - dia;\n    inicioSemana.setDate(hoy.getDate() + diferencia);\n    inicioSemana.setHours(0, 0, 0, 0);\n    \n    const finSemana = new Date(inicioSemana);\n    finSemana.setDate(inicioSemana.getDate() + 6);\n    finSemana.setHours(23, 59, 59, 999);\n    \n    const resumenSemana = getResumenHorasExtras(inicioSemana, finSemana);\n    \n    setInfoContexto({\n      esFestivo: infoFestivo.esFestivo,\n      nombreFestivo: infoFestivo.nombre,\n      tipoFestivo: infoFestivo.tipo,\n      horasExtrasSemana: resumenSemana.horasExtrasTotal || 0,\n      semanasConExtras: resumenSemana.semanas?.filter(s => s.horasExtras > 0).length || 0\n    });\n  }, [verificarFestivo, getResumenHorasExtras]);\n  \n  \n  useEffect(() => {\n    setNombreTemp(nombreEmpleado);\n  }, [nombreEmpleado]);\n  \n\n  const handleNombreChange = (e) => {\n    setNombreTemp(e.target.value);\n  };\n  \n\n  const handleGuardarNombre = () => {\n    if (!nombreTemp.trim()) {\n      setAlerta({\n        type: 'warning',\n        message: 'Por favor, ingresa tu nombre para registrar los fichajes'\n      });\n      return;\n    }\n    \n    setNombreEmpleado(nombreTemp.trim());\n    setAlerta({\n      type: 'success',\n      message: '¡Nombre guardado correctamente!'\n    });\n    \n  \n    setTimeout(() => {\n      setAlerta(null);\n    }, 3000);\n  };\n  \n  const handleRegistrarEntrada = () => {\n    if (!nombreEmpleado.trim()) {\n      setAlerta({\n        type: 'warning',\n        message: 'Por favor, guarda tu nombre antes de registrar la entrada'\n      });\n      return;\n    }\n    \n    const result = registrarEntrada();\n    \n    if (result.success) {\n      setAlerta({\n        type: 'success',\n        message: '¡Entrada registrada correctamente!'\n      });\n    } else {\n      setAlerta({\n        type: 'error',\n        message: result.message || 'Error al registrar entrada'\n      });\n    }\n    \n    setTimeout(() => {\n      setAlerta(null);\n    }, 3000);\n  };\n  \n\n  const handleRegistrarSalida = () => {\n    if (!sesionActiva) {\n      setAlerta({\n        type: 'warning',\n        message: 'No hay una sesión activa para registrar la salida'\n      });\n      return;\n    }\n    \n    const result = registrarSalida();\n    \n    if (result.success) {\n      let mensaje = '¡Salida registrada correctamente!';\n      let tipo = 'success';\n      \n      // Verificar si hay información de horas extras\n      if (result.horasExtrasInfo) {\n        const horasExtras = result.horasExtrasInfo;\n        \n        if (horasExtras.horasExtrasDetectadas) {\n          mensaje = `¡Salida registrada! 🎉 ${horasExtras.mensaje}`;\n          tipo = 'success';\n        } else {\n          mensaje = `¡Salida registrada! ${horasExtras.mensaje}`;\n        }\n      }\n      \n      setAlerta({\n        type: tipo,\n        message: mensaje\n      });\n      \n      // Mostrar alerta por más tiempo si hay horas extras\n      const tiempoAlerta = result.horasExtrasInfo?.horasExtrasDetectadas ? 5000 : 3000;\n      \n      setTimeout(() => {\n        setAlerta(null);\n      }, tiempoAlerta);\n    } else {\n      setAlerta({\n        type: 'error',\n        message: result.message || 'Error al registrar salida'\n      });\n      \n      setTimeout(() => {\n        setAlerta(null);\n      }, 3000);\n    }\n  };\n  \n  const handleCancelarSesion = () => {\n    if (window.confirm('¿Estás seguro de cancelar la sesión actual? Se eliminará el registro de entrada.')) {\n      const result = cancelarSesionActiva();\n      \n      if (result.success) {\n        setAlerta({\n          type: 'info',\n          message: 'Sesión cancelada correctamente'\n        });\n      } else {\n        setAlerta({\n          type: 'error',\n          message: result.message || 'Error al cancelar la sesión'\n        });\n      }\n\n      setTimeout(() => {\n        setAlerta(null);\n      }, 3000);\n    }\n  };\n  \n  const handleTogglePausa = () => {\n    const pausar = !sesionActiva?.pausada;\n    \n    const result = togglePausaSesion(pausar);\n    \n    if (result.success) {\n      setAlerta({\n        type: 'info',\n        message: pausar ? 'Temporizador pausado' : 'Temporizador reanudado'\n      });\n    } else {\n      setAlerta({\n        type: 'error',\n        message: result.message || 'Error al cambiar estado de pausa'\n      });\n    }\n    \n    setTimeout(() => {\n      setAlerta(null);\n    }, 3000);\n  };\n  \n  const handleDiaEspecialSuccess = (resultado) => {\n    setAlerta({\n      type: 'success',\n      message: `🎉 ${resultado.message} - ${resultado.diaEspecial.horas}h registradas`\n    });\n    \n    setTimeout(() => {\n      setAlerta(null);\n    }, 4000);\n  };\n  \n  const handleAbrirModalDiaEspecial = () => {\n    if (!nombreEmpleado.trim()) {\n      setAlerta({\n        type: 'warning',\n        message: 'Por favor, guarda tu nombre antes de registrar un día especial'\n      });\n      \n      setTimeout(() => {\n        setAlerta(null);\n      }, 3000);\n      \n      return;\n    }\n    \n    setModalDiaEspecialAbierto(true);\n  };\n\n  const formatearFechaInicio = () => {\n    if (!sesionActiva) return '';\n    \n    const fecha = new Date(sesionActiva.fechaInicio);\n    return fecha.toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  const noFlickerStyle = `\n    .tiempo-display {\n      transition: none;\n    }\n    .temporizador-container {\n      will-change: contents;\n    }\n  `;\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-lg p-6 mb-6\">\n      {/* Estilo para evitar parpadeos */}\n      <style>{noFlickerStyle}</style>\n      \n      <h2 className=\"text-xl font-semibold mb-4\">Control de Fichaje</h2>\n      \n      {/* Alerta de información */}\n      {alerta && (\n        <div className=\"mb-4\">\n          <Alert \n            type={alerta.type}\n            message={alerta.message}\n            onClose={() => setAlerta(null)}\n          />\n        </div>\n      )}\n      \n      {/* Información del empleado */}\n      <div className=\"mb-6\">\n        <div className=\"flex\">\n          <Input\n            type=\"text\"\n            value={nombreTemp}\n            onChange={handleNombreChange}\n            placeholder=\"Ingresa tu nombre\"\n            label=\"Nombre del Empleado\"\n            className=\"flex-grow\"\n          />\n          <div className=\"flex items-end ml-2\">\n            <Button \n            className='mb-4 p-4'\n              onClick={handleGuardarNombre}\n              variant=\"success\"\n              icon={<Save className=\"h-4 w-4\" />}\n            >\n              Guardar\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"mb-6\">\n        {/* Vista del reloj */}\n        <div className=\"text-center mb-4\">\n          <div className=\"text-4xl font-bold mb-2\">\n            {currentTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' })}\n          </div>\n          <div className=\"text-gray-600\">\n            {currentTime.toLocaleDateString([], { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}\n          </div>\n          \n          {/* Información de contexto */}\n          {infoContexto && (\n            <div className=\"mt-3 space-y-2\">\n              {infoContexto.esFestivo && (\n                <div className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-yellow-100 text-yellow-800\">\n                  <Gift className=\"h-4 w-4 mr-2\" />\n                  {infoContexto.nombreFestivo}\n                </div>\n              )}\n              \n              {infoContexto.horasExtrasSemana > 0 && (\n                <div className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800 ml-2\">\n                  <Award className=\"h-4 w-4 mr-2\" />\n                  {infoContexto.horasExtrasSemana.toFixed(1)}h extras esta semana\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n        \n        {/* Mostrar temporizador o botón de entrada según el estado */}\n        {sesionActiva ? (\n          <div className={`flex flex-col items-center mb-6 rounded-lg temporizador-container ${\n            sesionActiva.pausada ? 'bg-yellow-50' : 'bg-blue-50'\n          }`}>\n            <div className=\"mb-2 text-center\">\n              <div className={`text-sm font-medium ${\n                sesionActiva.pausada ? 'text-yellow-600' : 'text-blue-600'\n              }`}>\n                Sesión iniciada a las {formatearFechaInicio()}\n                {sesionActiva.pausada && (\n                  <span className=\"ml-2 inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-yellow-100 text-yellow-800\">\n                    Pausada\n                  </span>\n                )}\n              </div>\n            </div>\n            \n            <TemporizadorOptimizado \n              colorBorde={sesionActiva.pausada ? \"border-yellow-500\" : \"border-blue-500\"}\n              colorTexto={sesionActiva.pausada ? \"text-yellow-700\" : \"text-blue-700\"}\n            />\n            \n            <div className=\"grid grid-cols-3 gap-3 w-full mt-6\">\n              <Button \n              className='p-4'\n                onClick={handleTogglePausa}\n                variant={sesionActiva.pausada ? \"warning\" : \"info\"}\n                icon={sesionActiva.pausada ? <Play className=\"h-5 w-5\" /> : <Pause className=\"h-5 w-5\" />}\n                fullWidth\n              >\n                {sesionActiva.pausada ? 'Reanudar' : 'Pausar'}\n              </Button>\n              \n              <Button \n                className='p-4'\n                onClick={handleRegistrarSalida}\n                variant=\"primary\"\n                icon={<LogOut className=\"h-5 w-5\" />}\n                fullWidth\n                disabled={sesionActiva.pausada}\n              >\n                Registrar Salida\n              </Button>\n              \n              <Button \n              className='p-4'\n                onClick={handleCancelarSesion}\n                variant=\"danger\"\n                icon={<StopCircle className=\"h-5 w-5\" />}\n                fullWidth\n              >\n                Cancelar\n              </Button>\n            </div>\n            \n            {/* Botón para días especiales durante sesión activa */}\n            <div className=\"mt-4 w-full\">\n              <Button \n                onClick={handleAbrirModalDiaEspecial}\n                variant=\"secondary\"\n                icon={<Calendar className=\"h-4 w-4\" />}\n                className=\"w-full text-sm\"\n              >\n                Registrar Día Especial\n              </Button>\n            </div>\n            \n            <button \n              onClick={() => {\n                localStorage.removeItem('sesionActiva');\n                window.location.reload();\n              }}\n              className=\"mt-4 text-xs text-red-600 underline\"\n            >\n              Reiniciar si hay un problema con la sesión\n            </button>\n          </div>\n        ) : (\n          /* Botones cuando no hay sesión activa */\n          <div className=\"space-y-4\">\n            {/* Botón de Registrar Entrada */}\n            <div className=\"flex justify-center\">\n              <Button \n                onClick={handleRegistrarEntrada}\n                variant=\"primary\"\n                icon={<LogIn className=\"h-5 w-5\" />}\n                className=\"px-8 py-3 text-lg\"\n              >\n                Registrar Entrada\n              </Button>\n            </div>\n            \n            {/* Botones para días especiales */}\n            <div className=\"bg-gray-50 rounded-lg p-4\">\n              <h3 className=\"text-sm font-medium text-gray-700 mb-3 text-center\">\n                ¿No vas a trabajar hoy?\n              </h3>\n              <div className=\"grid grid-cols-1 gap-2\">\n                <Button \n                  onClick={handleAbrirModalDiaEspecial}\n                  variant=\"secondary\"\n                  icon={<Plus className=\"h-4 w-4\" />}\n                  className=\"w-full text-sm\"\n                >\n                  Registrar Día Especial\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-500 mt-2 text-center\">\n                Festivos, bajas laborales, días personales, etc.\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Modal para registrar día especial */}\n      <RegistrarDiaEspecialModal\n        isOpen={modalDiaEspecialAbierto}\n        onClose={() => setModalDiaEspecialAbierto(false)}\n        onSuccess={handleDiaEspecialSuccess}\n        empleado={nombreEmpleado}\n        fechaInicial={new Date()}\n      />\n    </div>\n  );\n};\n\nexport default ControlFichaje;