import React, { createContext, useState, useEffect, useRef } from 'react';\nimport fichajeService from '../services/fichajeService';\nimport * as serviceWorkerRegistration from '../serviceWorkerRegistration';\n\n\nexport const FichajeContext = createContext();\n\nexport const FichajeProvider = ({ children }) => {\n  const [fichajes, setFichajes] = useState([]);\n  const [nombreEmpleado, setNombreEmpleado] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [sesionActiva, setSesionActiva] = useState(null);\n  const [tiempoSesion, setTiempoSesion] = useState(0);\n  const timerInterval = useRef(null);\n\n  const iniciarIntervaloTemporizador = () => {\n  \n  \n  if (timerInterval.current) {\n    clearInterval(timerInterval.current);\n    timerInterval.current = null;\n  }\n  const tiempoInicial = fichajeService.calcularTiempoSesionActiva();\n  setTiempoSesion(tiempoInicial);\n  \n\n  timerInterval.current = setInterval(() => {\n  \n    const tiempoCalculado = fichajeService.calcularTiempoSesionActiva();\n    \n\n   setTiempoSesion(prevTiempo => {\n      if (Math.abs(tiempoCalculado - prevTiempo) > 0.1) {\n        console.log(`Actualización de temporizador: ${prevTiempo}s -> ${tiempoCalculado}s`);\n        return tiempoCalculado;\n      }\n      return prevTiempo;\n    });\n  }, 1000);\n  \n};\n  \n  const detenerIntervaloTemporizador = () => {\n    if (timerInterval.current) {\n      clearInterval(timerInterval.current);\n      timerInterval.current = null;\n    }\n  };\n  \n\n  useEffect(() => {\n    const cargarDatos = () => {\n      try {\n        console.log(\"Cargando datos iniciales...\");\n\n        const storedFichajes = fichajeService.getFichajes();\n        const storedNombre = fichajeService.getNombreEmpleado();\n        \n        setFichajes(storedFichajes);\n        setNombreEmpleado(storedNombre);\n        \n\n        const sesionGuardada = fichajeService.getSesionActiva();\n        console.log(\"Sesión guardada encontrada:\", sesionGuardada);\n        \n        if (sesionGuardada) {\n\n          if (sesionGuardada.id && sesionGuardada.fechaInicio) {\n            const entradaExiste = storedFichajes.some(\n              (fichaje) => fichaje.id === sesionGuardada.id && fichaje.tipo === 'entrada'\n            );\n            \n            if (entradaExiste) {\n              console.log(\"Sesión válida encontrada, activando...\");\n              let sesionActualizada = {...sesionGuardada};\n              \n              if (!sesionActualizada.ultimaActualizacion) {\n                sesionActualizada.ultimaActualizacion = sesionActualizada.fechaInicio;\n                fichajeService.setSesionActiva(sesionActualizada);\n              }\n              \n\n              setSesionActiva(sesionActualizada);\n              \n              const tiempoCalculado = fichajeService.calcularTiempoSesionActiva();\n              console.log(\"Tiempo calculado:\", tiempoCalculado);\n              setTiempoSesion(tiempoCalculado);\n              \n              try {\n                serviceWorkerRegistration.startTimerInSW(\n                  sesionActualizada.id,\n                  sesionActualizada.fechaInicio,\n                  sesionActualizada.tiempoAcumulado || 0,\n                  sesionActualizada.pausada || false\n                );\n              } catch (swError) {\n                console.warn('Error al iniciar el temporizador en el Service Worker:', swError);\n              }\n              \n              if (!sesionActualizada.pausada) {\n                iniciarIntervaloTemporizador();\n              }\n            } else {\n              console.warn('Sesión inválida detectada (no hay fichaje correspondiente). Limpiando...');\n              fichajeService.clearSesionActiva();\n            }\n          } else {\n            console.warn('Sesión inválida detectada (faltan datos). Limpiando...');\n            fichajeService.clearSesionActiva();\n          }\n        } else {\n          console.log(\"No hay sesión activa guardada\");\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        console.error('Error al cargar datos:', err);\n        setError('Error al cargar los datos. Intente recargar la página.');\n        setLoading(false);\n      }\n    };\n    \n    cargarDatos();\n\n    return () => {\n      detenerIntervaloTemporizador();\n      try {\n        serviceWorkerRegistration.stopTimerInSW();\n      } catch (error) {\n        console.warn('Error al detener el temporizador en el Service Worker:', error);\n      }\n    };\n  }, []);\n  \n  useEffect(() => {\n    if (sesionActiva) {\n      console.log(\"Estado de pausa cambiado:\", sesionActiva.pausada);\n      if (sesionActiva.pausada) {\n        detenerIntervaloTemporizador();\n      } else {\n        iniciarIntervaloTemporizador();\n      }\n    }\n  }, [sesionActiva?.pausada]);\n  \n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      console.log(\"Visibilidad cambiada:\", document.visibilityState);\n      \n      if (document.visibilityState === 'visible') {\n\n        if (sesionActiva) {\n          console.log(\"Página visible con sesión activa, recalculando tiempo...\");\n          \n          const tiempoCalculado = fichajeService.calcularTiempoSesionActiva();\n          console.log(\"Tiempo recalculado:\", tiempoCalculado);\n          setTiempoSesion(tiempoCalculado);\n          \n          if (!sesionActiva.pausada) {\n            iniciarIntervaloTemporizador();\n          }\n        }\n      } else if (document.visibilityState === 'hidden') {\n\n        console.log(\"Página oculta, deteniendo intervalo de UI\");\n        detenerIntervaloTemporizador();\n      }\n    };\n    \n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n\n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [sesionActiva]);\n  \n  const guardarNombreEmpleado = (nombre) => {\n    try {\n      fichajeService.setNombreEmpleado(nombre);\n      setNombreEmpleado(nombre);\n      return true;\n    } catch (err) {\n      setError('Error al guardar el nombre del empleado');\n      return false;\n    }\n  };\n\n  const registrarEntrada = () => {\n    try {\n      console.log(\"Registrando entrada...\");\n      if (sesionActiva) {\n        setError('Ya tienes una sesión activa. Finaliza la sesión actual antes de iniciar una nueva.');\n        return { \n          success: false, \n          message: 'Ya tienes una sesión activa' \n        };\n      }\n      \n      const result = fichajeService.registrarFichaje(\n        'entrada', \n        nombreEmpleado\n      );\n      \n      if (result.success) {\n        console.log(\"Entrada registrada correctamente:\", result.fichaje);\n        \n        const nuevaSesion = {\n          id: result.fichaje.id,\n          fechaInicio: result.fichaje.fecha,\n          empleado: nombreEmpleado,\n          tiempoAcumulado: 0,\n          pausada: false,\n          ultimaActualizacion: new Date().toISOString()\n        };\n\n        setSesionActiva(nuevaSesion);\n        setTiempoSesion(0);\n        setFichajes(prevFichajes => [result.fichaje, ...prevFichajes]);\n        \n        fichajeService.setSesionActiva(nuevaSesion);\n        \n        try {\n          serviceWorkerRegistration.startTimerInSW(\n            nuevaSesion.id,\n            nuevaSesion.fechaInicio,\n            nuevaSesion.tiempoAcumulado,\n            nuevaSesion.pausada\n          );\n        } catch (swError) {\n          console.warn('Error al iniciar el temporizador en el Service Worker:', swError);\n        }\n        \n        iniciarIntervaloTemporizador();\n      } else {\n        setError(result.message || 'Error al registrar entrada');\n      }\n      \n      return result;\n    } catch (err) {\n      console.error(\"Error en registrarEntrada:\", err);\n      const message = 'Error al registrar entrada';\n      setError(message);\n      return { success: false, message };\n    }\n  };\n  \n\n  const registrarSalida = () => {\n    try {\n      console.log(\"Registrando salida...\");\n      if (!sesionActiva) {\n        setError('No hay ninguna sesión activa para registrar la salida.');\n        return { \n          success: false, \n          message: 'No hay sesión activa' \n        };\n      }\n\n      detenerIntervaloTemporizador();\n\n      try {\n        serviceWorkerRegistration.stopTimerInSW();\n      } catch (swError) {\n        console.warn('Error al comunicarse con el Service Worker:', swError);\n      }\n      const entradaId = sesionActiva.id;\n    const tiempoTrabajadoActual = tiempoSesion;\n    const estaPausada = sesionActiva.pausada || false;\n    \n    // Calculate hours and minutes for display format\n    const horas = Math.floor(tiempoTrabajadoActual / 3600);\n    const minutos = Math.floor((tiempoTrabajadoActual % 3600) / 60);\n    const tiempoFormateado = `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}`;\n    \n    // Now register the checkout with the entradaId and tiempoTrabajado\n    const result = fichajeService.registrarFichaje(\n    'salida', \n    nombreEmpleado,\n    {\n    entradaId,\n    tiempoTrabajado: tiempoTrabajadoActual,\n    tiempoFormateado,\n    pausada: estaPausada,\n      sesionAnterior: sesionActiva\n    }\n      );\n\n      if (result.success) {\n        console.log(\"Salida registrada correctamente:\", result.fichaje);\n\n         setSesionActiva(null);\n      setTiempoSesion(0);\n        \n        setFichajes(prevFichajes => [result.fichaje, ...prevFichajes]);\n        \n        fichajeService.clearSesionActiva();\n        \n        // Procesar información de horas extras si existe\n        if (result.horasExtras) {\n          console.log('Horas extras detectadas:', result.horasExtras);\n          \n          // Añadir información de horas extras al resultado\n          result.horasExtrasInfo = result.horasExtras;\n        }\n        \n        return result;\n      } else {\n        setError(result.message || 'Error al registrar salida');\n        \n        return result;\n      }\n    } catch (err) {\n      console.error(\"Error en registrarSalida:\", err);\n      const message = 'Error al registrar salida';\n      setError(message);\n      return { success: false, message };\n    }\n  };\n  \n  const togglePausaSesion = (pausar) => {\n  try {\n    console.log(`${pausar ? 'Pausando' : 'Reanudando'} sesión...`);\n    \n    if (!sesionActiva) {\n      return {\n        success: false,\n        message: 'No hay sesión activa para pausar/reanudar'\n      };\n    }\n    \n    if (pausar) {\n      console.log('Pausando: Guardando tiempo acumulado hasta ahora');\n      \n      const tiempoActual = fichajeService.calcularTiempoSesionActiva();\n      console.log(`Tiempo acumulado al pausar: ${tiempoActual} segundos`);\n      \n      detenerIntervaloTemporizador();\n      \n      const sesionActualizada = {\n        ...sesionActiva,\n        pausada: true,\n        tiempoAcumulado: tiempoActual, \n        ultimaActualizacion: new Date().toISOString()\n      };\n      \n\n      setSesionActiva(sesionActualizada);\n      \n\n      fichajeService.setSesionActiva(sesionActualizada);\n      \n      try {\n        serviceWorkerRegistration.togglePauseTimerInSW(true);\n      } catch (error) {\n        console.warn('Error al comunicarse con el Service Worker:', error);\n      }\n      \n      return { \n        success: true, \n        sesion: sesionActualizada \n      };\n    } \n\n    else {\n      console.log('Reanudando: Manteniendo tiempo acumulado y comenzando a contar desde ahí');\n\n      const tiempoAcumulado = sesionActiva.tiempoAcumulado || 0;\n      console.log(`Reanudando con tiempo acumulado: ${tiempoAcumulado} segundos`);\n\n      const sesionActualizada = {\n        ...sesionActiva,\n        pausada: false,\n        ultimaActualizacion: new Date().toISOString() \n      };\n      \n      setSesionActiva(sesionActualizada);\n      \n      iniciarIntervaloTemporizador();\n      \n      fichajeService.setSesionActiva(sesionActualizada);\n      \n      try {\n        serviceWorkerRegistration.togglePauseTimerInSW(false);\n      } catch (error) {\n        console.warn('Error al comunicarse con el Service Worker:', error);\n      }\n      \n      return { \n        success: true, \n        sesion: sesionActualizada \n      };\n    }\n  } catch (err) {\n    console.error(\"Error en togglePausaSesion:\", err);\n    const message = 'Error al cambiar estado de pausa';\n    setError(message);\n    return { success: false, message };\n  }\n};\n  \n  const cancelarSesionActiva = () => {\n    try {\n      console.log(\"Cancelando sesión activa...\");\n      \n      if (!sesionActiva) {\n        return { success: false, message: 'No hay una sesión activa para cancelar' };\n      }\n      \n      const entradaId = sesionActiva.id;\n      \n      detenerIntervaloTemporizador();\n      \n\n      try {\n        serviceWorkerRegistration.stopTimerInSW();\n      } catch (swError) {\n        console.warn('Error al comunicarse con el Service Worker:', swError);\n      }\n      \n      setSesionActiva(null);\n      setTiempoSesion(0);\n      \n      const result = fichajeService.eliminarFichaje(entradaId);\n      \n      if (result.success) {\n        console.log(\"Sesión cancelada correctamente\");\n        \n        setFichajes(result.fichajes);\n        \n        fichajeService.clearSesionActiva();\n        return { success: true };\n      } else {\n        setError(result.message || 'Error al cancelar la sesión');\n        return result;\n      }\n    } catch (err) {\n      console.error(\"Error en cancelarSesionActiva:\", err);\n      const message = 'Error al cancelar la sesión';\n      setError(message);\n      return { success: false, message };\n    }\n  };\n  \n  const editarFichaje = (fichajeId, nuevaFecha) => {\n    try {\n      console.log(`Editando fichaje ${fichajeId} a fecha ${nuevaFecha}`);\n\n      if (sesionActiva && sesionActiva.id === fichajeId) {\n\n        const now = new Date();\n        const newStartTime = nuevaFecha;\n        const newElapsedSeconds = Math.max(0, (now - newStartTime) / 1000);\n\n        const nuevaSesion = {\n          ...sesionActiva,\n          fechaInicio: nuevaFecha.toISOString(),\n          tiempoAcumulado: newElapsedSeconds,\n          ultimaActualizacion: new Date().toISOString()\n        };\n        \n        setSesionActiva(nuevaSesion);\n        setTiempoSesion(newElapsedSeconds);\n        \n        fichajeService.setSesionActiva(nuevaSesion);\n        \n        try {\n          serviceWorkerRegistration.startTimerInSW(\n            nuevaSesion.id,\n            nuevaSesion.fechaInicio,\n            nuevaSesion.tiempoAcumulado,\n            nuevaSesion.pausada\n          );\n        } catch (swError) {\n          console.warn('Error al comunicarse con el Service Worker:', swError);\n        }\n      }\n      \n      const result = fichajeService.editarFichaje(fichajeId, nuevaFecha);\n      \n      if (result.success) {\n        console.log(\"Fichaje editado correctamente\");\n        setFichajes(result.fichajes);\n      } else {\n        setError(result.message || 'Error al editar fichaje');\n      }\n      \n      return result;\n    } catch (err) {\n      console.error(\"Error en editarFichaje:\", err);\n      const message = 'Error al editar fichaje';\n      setError(message);\n      return { success: false, message };\n    }\n  };\n  \n\n  const eliminarFichaje = (fichajeId) => {\n    try {\n      console.log(`Eliminando fichaje ${fichajeId}`);\n      \n      if (sesionActiva && sesionActiva.id === fichajeId) {\n        return cancelarSesionActiva();\n      }\n      \n      const result = fichajeService.eliminarFichaje(fichajeId);\n      \n      if (result.success) {\n        console.log(\"Fichaje eliminado correctamente\");\n        setFichajes(result.fichajes);\n      } else {\n        setError(result.message || 'Error al eliminar fichaje');\n      }\n      \n      return result;\n    } catch (err) {\n      console.error(\"Error en eliminarFichaje:\", err);\n      const message = 'Error al eliminar fichaje';\n      setError(message);\n      return { success: false, message };\n    }\n  };\n  \n\n  const getFichajesPorPeriodo = (fechaInicio, fechaFin) => {\n    try {\n      return fichajeService.getFichajesPorFecha(fechaInicio, fechaFin);\n    } catch (err) {\n      console.error(\"Error en getFichajesPorPeriodo:\", err);\n      setError('Error al obtener fichajes por período');\n      return [];\n    }\n  };\n  \n\n  const getEstadisticas = (fechaInicio, fechaFin) => {\n    try {\n      return fichajeService.getEstadisticas(fechaInicio, fechaFin, sesionActiva);\n    } catch (err) {\n      console.error(\"Error en getEstadisticas:\", err);\n      setError('Error al obtener estadísticas');\n      return null;\n    }\n  };\n  \n\n  const getEstadisticasDetalladas = (fechaInicio, fechaFin) => {\n    try {\n      return fichajeService.getEstadisticasDetalladas(fechaInicio, fechaFin, sesionActiva);\n    } catch (err) {\n      console.error(\"Error en getEstadisticasDetalladas:\", err);\n      setError('Error al obtener estadísticas detalladas');\n      return null;\n    }\n  };\n  \n  // Nuevas funciones para días festivos y horas extras\n  const verificarFestivo = (fecha) => {\n    try {\n      return fichajeService.verificarFestivo(fecha);\n    } catch (err) {\n      console.error(\"Error en verificarFestivo:\", err);\n      return { esFestivo: false, tipo: null, nombre: null };\n    }\n  };\n  \n  const verificarDiaLaborable = (fecha) => {\n    try {\n      return fichajeService.verificarDiaLaborable(fecha);\n    } catch (err) {\n      console.error(\"Error en verificarDiaLaborable:\", err);\n      return { esLaborable: true, razon: 'error' };\n    }\n  };\n  \n  const getResumenHorasExtras = (fechaInicio, fechaFin) => {\n    try {\n      return fichajeService.getResumenHorasExtras(fechaInicio, fechaFin, sesionActiva);\n    } catch (err) {\n      console.error(\"Error en getResumenHorasExtras:\", err);\n      setError('Error al obtener resumen de horas extras');\n      return {\n        horasExtrasTotal: 0,\n        semanas: [],\n        totalSegundosExtras: 0,\n        resumenPorMes: {}\n      };\n    }\n  };\n  \n  const getEstadisticasExtendidas = (fechaInicio, fechaFin) => {\n    try {\n      return fichajeService.getEstadisticasExtendidas(fechaInicio, fechaFin, sesionActiva);\n    } catch (err) {\n      console.error(\"Error en getEstadisticasExtendidas:\", err);\n      setError('Error al obtener estadísticas extendidas');\n      return null;\n    }\n  };\n  \n  // Nuevas funciones para días especiales\n  const registrarDiaEspecial = (fecha, tipo, motivo) => {\n    try {\n      return fichajeService.registrarDiaEspecial(fecha, tipo, motivo, nombreEmpleado);\n    } catch (err) {\n      console.error(\"Error en registrarDiaEspecial:\", err);\n      setError('Error al registrar el día especial');\n      return {\n        success: false,\n        message: 'Error al registrar el día especial'\n      };\n    }\n  };\n  \n  const getDiasEspeciales = () => {\n    try {\n      return fichajeService.getDiasEspeciales();\n    } catch (err) {\n      console.error(\"Error en getDiasEspeciales:\", err);\n      return [];\n    }\n  };\n  \n  const esDiaEspecial = (fecha) => {\n    try {\n      return fichajeService.esDiaEspecial(fecha, nombreEmpleado);\n    } catch (err) {\n      console.error(\"Error en esDiaEspecial:\", err);\n      return null;\n    }\n  };\n  \n  const eliminarDiaEspecial = (diaEspecialId) => {\n    try {\n      return fichajeService.eliminarDiaEspecial(diaEspecialId);\n    } catch (err) {\n      console.error(\"Error en eliminarDiaEspecial:\", err);\n      setError('Error al eliminar el día especial');\n      return {\n        success: false,\n        message: 'Error al eliminar el día especial'\n      };\n    }\n  };\n  \n  const value = {\n    fichajes,\n    nombreEmpleado,\n    setNombreEmpleado: guardarNombreEmpleado,\n    loading,\n    error,\n    sesionActiva,\n    tiempoSesion,\n    registrarEntrada,\n    registrarSalida,\n    togglePausaSesion,\n    editarFichaje,\n    eliminarFichaje,\n    cancelarSesionActiva,\n    getFichajesPorPeriodo,\n    getEstadisticas,\n    getEstadisticasDetalladas,\n    // Funciones de festivos y horas extras\n    verificarFestivo,\n    verificarDiaLaborable,\n    getResumenHorasExtras,\n    getEstadisticasExtendidas,\n    // Nuevas funciones de días especiales\n    registrarDiaEspecial,\n    getDiasEspeciales,\n    esDiaEspecial,\n    eliminarDiaEspecial\n  };\n  \n  return <FichajeContext.Provider value={value}>{children}</FichajeContext.Provider>;\n};